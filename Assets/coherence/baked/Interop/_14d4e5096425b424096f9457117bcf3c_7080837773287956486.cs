// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;
    public struct _14d4e5096425b424096f9457117bcf3c_7080837773287956486 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public System.Single FullBodyWeight;
            [FieldOffset(4)]
            public System.Single CrouchWeight;
            [FieldOffset(8)]
            public System.Single ProneWeight;
            [FieldOffset(12)]
            public System.Single SprintPoseWeight;
            [FieldOffset(16)]
            public System.Single MaskLeftHandIK;
            [FieldOffset(20)]
            public System.Single OverlayType;
            [FieldOffset(24)]
            public System.Single MoveX;
            [FieldOffset(28)]
            public System.Single MoveY;
            [FieldOffset(32)]
            public System.Single Velocity;
            [FieldOffset(36)]
            public System.Single Sprinting;
            [FieldOffset(40)]
            public System.Byte Moving;
            [FieldOffset(41)]
            public System.Byte Crouching;
            [FieldOffset(42)]
            public System.Byte Proning;
            [FieldOffset(43)]
            public System.Byte InAir;
        }

        public void ResetFrame(AbsoluteSimulationFrame frame)
        {
            FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.FullBodyWeightMask;
            FullBodyWeightSimulationFrame = frame;
            FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.CrouchWeightMask;
            CrouchWeightSimulationFrame = frame;
            FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.ProneWeightMask;
            ProneWeightSimulationFrame = frame;
            FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.SprintPoseWeightMask;
            SprintPoseWeightSimulationFrame = frame;
            FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.MaskLeftHandIKMask;
            MaskLeftHandIKSimulationFrame = frame;
            FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.OverlayTypeMask;
            OverlayTypeSimulationFrame = frame;
            FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.MoveXMask;
            MoveXSimulationFrame = frame;
            FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.MoveYMask;
            MoveYSimulationFrame = frame;
            FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.VelocityMask;
            VelocitySimulationFrame = frame;
            FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.SprintingMask;
            SprintingSimulationFrame = frame;
            FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.MovingMask;
            MovingSimulationFrame = frame;
            FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.CrouchingMask;
            CrouchingSimulationFrame = frame;
            FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.ProningMask;
            ProningSimulationFrame = frame;
            FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.InAirMask;
            InAirSimulationFrame = frame;
        }

        public static unsafe _14d4e5096425b424096f9457117bcf3c_7080837773287956486 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 44) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 44) " +
                    "for component with ID 33");
            }

            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 33");
            }

            var orig = new _14d4e5096425b424096f9457117bcf3c_7080837773287956486();

            var comp = (Interop*)data;

            orig.FullBodyWeight = comp->FullBodyWeight;
            orig.CrouchWeight = comp->CrouchWeight;
            orig.ProneWeight = comp->ProneWeight;
            orig.SprintPoseWeight = comp->SprintPoseWeight;
            orig.MaskLeftHandIK = comp->MaskLeftHandIK;
            orig.OverlayType = comp->OverlayType;
            orig.MoveX = comp->MoveX;
            orig.MoveY = comp->MoveY;
            orig.Velocity = comp->Velocity;
            orig.Sprinting = comp->Sprinting;
            orig.Moving = comp->Moving != 0;
            orig.Crouching = comp->Crouching != 0;
            orig.Proning = comp->Proning != 0;
            orig.InAir = comp->InAir != 0;

            return orig;
        }


        public static uint FullBodyWeightMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame FullBodyWeightSimulationFrame;
        public System.Single FullBodyWeight;
        public static uint CrouchWeightMask => 0b00000000000000000000000000000010;
        public AbsoluteSimulationFrame CrouchWeightSimulationFrame;
        public System.Single CrouchWeight;
        public static uint ProneWeightMask => 0b00000000000000000000000000000100;
        public AbsoluteSimulationFrame ProneWeightSimulationFrame;
        public System.Single ProneWeight;
        public static uint SprintPoseWeightMask => 0b00000000000000000000000000001000;
        public AbsoluteSimulationFrame SprintPoseWeightSimulationFrame;
        public System.Single SprintPoseWeight;
        public static uint MaskLeftHandIKMask => 0b00000000000000000000000000010000;
        public AbsoluteSimulationFrame MaskLeftHandIKSimulationFrame;
        public System.Single MaskLeftHandIK;
        public static uint OverlayTypeMask => 0b00000000000000000000000000100000;
        public AbsoluteSimulationFrame OverlayTypeSimulationFrame;
        public System.Single OverlayType;
        public static uint MoveXMask => 0b00000000000000000000000001000000;
        public AbsoluteSimulationFrame MoveXSimulationFrame;
        public System.Single MoveX;
        public static uint MoveYMask => 0b00000000000000000000000010000000;
        public AbsoluteSimulationFrame MoveYSimulationFrame;
        public System.Single MoveY;
        public static uint VelocityMask => 0b00000000000000000000000100000000;
        public AbsoluteSimulationFrame VelocitySimulationFrame;
        public System.Single Velocity;
        public static uint SprintingMask => 0b00000000000000000000001000000000;
        public AbsoluteSimulationFrame SprintingSimulationFrame;
        public System.Single Sprinting;
        public static uint MovingMask => 0b00000000000000000000010000000000;
        public AbsoluteSimulationFrame MovingSimulationFrame;
        public System.Boolean Moving;
        public static uint CrouchingMask => 0b00000000000000000000100000000000;
        public AbsoluteSimulationFrame CrouchingSimulationFrame;
        public System.Boolean Crouching;
        public static uint ProningMask => 0b00000000000000000001000000000000;
        public AbsoluteSimulationFrame ProningSimulationFrame;
        public System.Boolean Proning;
        public static uint InAirMask => 0b00000000000000000010000000000000;
        public AbsoluteSimulationFrame InAirSimulationFrame;
        public System.Boolean InAir;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 33;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000011111111111111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;


        public long[] GetSimulationFrames() {
            return null;
        }

        public int GetFieldCount() => 14;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            return 0;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;


        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;


            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_14d4e5096425b424096f9457117bcf3c_7080837773287956486)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                this.FullBodyWeightSimulationFrame = other.FullBodyWeightSimulationFrame;
                this.FullBodyWeight = other.FullBodyWeight;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.CrouchWeightSimulationFrame = other.CrouchWeightSimulationFrame;
                this.CrouchWeight = other.CrouchWeight;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.ProneWeightSimulationFrame = other.ProneWeightSimulationFrame;
                this.ProneWeight = other.ProneWeight;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.SprintPoseWeightSimulationFrame = other.SprintPoseWeightSimulationFrame;
                this.SprintPoseWeight = other.SprintPoseWeight;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.MaskLeftHandIKSimulationFrame = other.MaskLeftHandIKSimulationFrame;
                this.MaskLeftHandIK = other.MaskLeftHandIK;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.OverlayTypeSimulationFrame = other.OverlayTypeSimulationFrame;
                this.OverlayType = other.OverlayType;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.MoveXSimulationFrame = other.MoveXSimulationFrame;
                this.MoveX = other.MoveX;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.MoveYSimulationFrame = other.MoveYSimulationFrame;
                this.MoveY = other.MoveY;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.VelocitySimulationFrame = other.VelocitySimulationFrame;
                this.Velocity = other.Velocity;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.SprintingSimulationFrame = other.SprintingSimulationFrame;
                this.Sprinting = other.Sprinting;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.MovingSimulationFrame = other.MovingSimulationFrame;
                this.Moving = other.Moving;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.CrouchingSimulationFrame = other.CrouchingSimulationFrame;
                this.Crouching = other.Crouching;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.ProningSimulationFrame = other.ProningSimulationFrame;
                this.Proning = other.Proning;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.InAirSimulationFrame = other.InAirSimulationFrame;
                this.InAir = other.InAir;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_14d4e5096425b424096f9457117bcf3c_7080837773287956486 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 14);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.FullBodyWeight;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.CrouchWeight;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.ProneWeight;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.SprintPoseWeight;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.MaskLeftHandIK;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.OverlayType;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.MoveX;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.MoveY;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.Velocity;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.Sprinting;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.Moving;



                bitStream.WriteBool(fieldValue);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.Crouching;



                bitStream.WriteBool(fieldValue);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.Proning;



                bitStream.WriteBool(fieldValue);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.InAir;



                bitStream.WriteBool(fieldValue);
            }

            mask >>= 1;

            return mask;
        }

        public static _14d4e5096425b424096f9457117bcf3c_7080837773287956486 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(14);
            }

            var val = new _14d4e5096425b424096f9457117bcf3c_7080837773287956486();
            if (bitStream.ReadMask())
            {

                val.FullBodyWeight = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.FullBodyWeightMask;
            }
            if (bitStream.ReadMask())
            {

                val.CrouchWeight = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.CrouchWeightMask;
            }
            if (bitStream.ReadMask())
            {

                val.ProneWeight = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.ProneWeightMask;
            }
            if (bitStream.ReadMask())
            {

                val.SprintPoseWeight = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.SprintPoseWeightMask;
            }
            if (bitStream.ReadMask())
            {

                val.MaskLeftHandIK = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.MaskLeftHandIKMask;
            }
            if (bitStream.ReadMask())
            {

                val.OverlayType = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.OverlayTypeMask;
            }
            if (bitStream.ReadMask())
            {

                val.MoveX = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.MoveXMask;
            }
            if (bitStream.ReadMask())
            {

                val.MoveY = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.MoveYMask;
            }
            if (bitStream.ReadMask())
            {

                val.Velocity = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.VelocityMask;
            }
            if (bitStream.ReadMask())
            {

                val.Sprinting = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.SprintingMask;
            }
            if (bitStream.ReadMask())
            {

                val.Moving = bitStream.ReadBool();
                val.FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.MovingMask;
            }
            if (bitStream.ReadMask())
            {

                val.Crouching = bitStream.ReadBool();
                val.FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.CrouchingMask;
            }
            if (bitStream.ReadMask())
            {

                val.Proning = bitStream.ReadBool();
                val.FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.ProningMask;
            }
            if (bitStream.ReadMask())
            {

                val.InAir = bitStream.ReadBool();
                val.FieldsMask |= _14d4e5096425b424096f9457117bcf3c_7080837773287956486.InAirMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }


        public override string ToString()
        {
            return $"_14d4e5096425b424096f9457117bcf3c_7080837773287956486(" +
                $" FullBodyWeight: { this.FullBodyWeight }" +
                $" CrouchWeight: { this.CrouchWeight }" +
                $" ProneWeight: { this.ProneWeight }" +
                $" SprintPoseWeight: { this.SprintPoseWeight }" +
                $" MaskLeftHandIK: { this.MaskLeftHandIK }" +
                $" OverlayType: { this.OverlayType }" +
                $" MoveX: { this.MoveX }" +
                $" MoveY: { this.MoveY }" +
                $" Velocity: { this.Velocity }" +
                $" Sprinting: { this.Sprinting }" +
                $" Moving: { this.Moving }" +
                $" Crouching: { this.Crouching }" +
                $" Proning: { this.Proning }" +
                $" InAir: { this.InAir }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(14, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(14, '0') })";
        }
    }

}
