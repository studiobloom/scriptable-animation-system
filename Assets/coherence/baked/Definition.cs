// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Brook;
    using Coherence.Connection;
    using Coherence.Entities;
    using Coherence.Serializer;
    using Coherence.Log;
    using Coherence.SimulationFrame;


    [UnityEngine.Scripting.Preserve]

    public class Definition : IDefinition
    {
        public const string schemaId = "8a9f47989b5043b46f033c3d7c34fced0b68b387";
        public const uint InternalWorldPosition = 0;
        public const uint InternalWorldOrientation = 1;
        public const uint InternalLocalUserComponent = 2;
        public const uint InternalWorldPositionQuery = 3;
        public const uint InternalArchetypeComponent = 4;
        public const uint InternalPersistence = 5;
        public const uint InternalConnectedEntity = 6;
        public const uint InternalUniqueID = 7;
        public const uint InternalConnection = 8;
        public const uint InternalConnectionScene = 9;
        public const uint InternalGlobal = 10;
        public const uint InternalGlobalQuery = 11;
        public const uint InternalTag = 12;
        public const uint InternalTagQuery = 13;
        public const uint InternalPreserveChildren = 14;
        public const uint InternalScene = 15;
        public const uint InternalAssetId = 16;
        public const uint InternalGenericScale = 17;
        public const uint Internal_14d4e5096425b424096f9457117bcf3c_7080837773287956486 = 18;
        public const uint InternalAuthorityRequest = 0;
        public const uint InternalAuthorityTransfer = 1;
        public const uint InternalQuerySynced = 2;
        public const uint InternalAdoptOrphan = 3;
        public const uint InternalPersistenceReady = 4;
        public const uint InternalSceneIndexChanged = 5;

        private static readonly Dictionary<uint, string> componentNamesForTypeIds = new Dictionary<uint, string>()
        {
            { 0, "WorldPosition" },
            { 1, "WorldOrientation" },
            { 2, "LocalUserComponent" },
            { 3, "WorldPositionQuery" },
            { 4, "ArchetypeComponent" },
            { 5, "Persistence" },
            { 6, "ConnectedEntity" },
            { 7, "UniqueID" },
            { 8, "Connection" },
            { 9, "ConnectionScene" },
            { 10, "Global" },
            { 11, "GlobalQuery" },
            { 12, "Tag" },
            { 13, "TagQuery" },
            { 14, "PreserveChildren" },
            { 15, "Scene" },
            { 16, "AssetId" },
            { 17, "GenericScale" },
            { 18, "_14d4e5096425b424096f9457117bcf3c_7080837773287956486" },
        };

        public static string ComponentNameForTypeId(uint typeId)
        {
            if (componentNamesForTypeIds.TryGetValue(typeId, out string componentName))
            {
                return componentName;
            }
            else
            {
                return "";
            }
        }

        public static readonly Dictionary<uint, MessageTarget> CommandRoutingByType = new Dictionary<uint, MessageTarget>()
        {
            { Definition.InternalAuthorityRequest , MessageTarget.All },
            { Definition.InternalAuthorityTransfer , MessageTarget.All },
            { Definition.InternalQuerySynced , MessageTarget.All },
            { Definition.InternalAdoptOrphan , MessageTarget.All },
            { Definition.InternalPersistenceReady , MessageTarget.All },
            { Definition.InternalSceneIndexChanged , MessageTarget.All },
        };

        public ICoherenceComponentData ReadComponentUpdate(uint componentType, AbsoluteSimulationFrame referenceSimulationFrame,
            IInBitStream bitStream, Logger logger)
        {
            var inProtocolStream = new InProtocolBitStream(bitStream);

            switch (componentType)
            {
                case InternalWorldPosition:
                    return WorldPosition.Deserialize(referenceSimulationFrame, inProtocolStream);
                case InternalWorldOrientation:
                    return WorldOrientation.Deserialize(referenceSimulationFrame, inProtocolStream);
                case InternalLocalUserComponent:
                    return LocalUserComponent.Deserialize(referenceSimulationFrame, inProtocolStream);
                case InternalWorldPositionQuery:
                    return WorldPositionQuery.Deserialize(referenceSimulationFrame, inProtocolStream);
                case InternalArchetypeComponent:
                    return ArchetypeComponent.Deserialize(referenceSimulationFrame, inProtocolStream);
                case InternalPersistence:
                    return Persistence.Deserialize(referenceSimulationFrame, inProtocolStream);
                case InternalConnectedEntity:
                    return ConnectedEntity.Deserialize(referenceSimulationFrame, inProtocolStream);
                case InternalUniqueID:
                    return UniqueID.Deserialize(referenceSimulationFrame, inProtocolStream);
                case InternalConnection:
                    return Connection.Deserialize(referenceSimulationFrame, inProtocolStream);
                case InternalConnectionScene:
                    return ConnectionScene.Deserialize(referenceSimulationFrame, inProtocolStream);
                case InternalGlobal:
                    return Global.Deserialize(referenceSimulationFrame, inProtocolStream);
                case InternalGlobalQuery:
                    return GlobalQuery.Deserialize(referenceSimulationFrame, inProtocolStream);
                case InternalTag:
                    return Tag.Deserialize(referenceSimulationFrame, inProtocolStream);
                case InternalTagQuery:
                    return TagQuery.Deserialize(referenceSimulationFrame, inProtocolStream);
                case InternalPreserveChildren:
                    return PreserveChildren.Deserialize(referenceSimulationFrame, inProtocolStream);
                case InternalScene:
                    return Scene.Deserialize(referenceSimulationFrame, inProtocolStream);
                case InternalAssetId:
                    return AssetId.Deserialize(referenceSimulationFrame, inProtocolStream);
                case InternalGenericScale:
                    return GenericScale.Deserialize(referenceSimulationFrame, inProtocolStream);
                case Internal_14d4e5096425b424096f9457117bcf3c_7080837773287956486:
                    return _14d4e5096425b424096f9457117bcf3c_7080837773287956486.Deserialize(referenceSimulationFrame, inProtocolStream);
                default:
                    throw new System.ArgumentOutOfRangeException(nameof(componentType),
                        $"Missing serialization implementation for a component: {componentType}");
            }
        }

        public uint WriteComponentUpdate(ICoherenceComponentData data, uint serializeAs, bool isRefSimFrameValid,
            AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream protocolStream, Logger logger)
        {
            switch (serializeAs)
            {
                case InternalWorldPosition:
                    return WorldPosition.Serialize((WorldPosition)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case InternalWorldOrientation:
                    return WorldOrientation.Serialize((WorldOrientation)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case InternalLocalUserComponent:
                    return LocalUserComponent.Serialize((LocalUserComponent)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case InternalWorldPositionQuery:
                    return WorldPositionQuery.Serialize((WorldPositionQuery)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case InternalArchetypeComponent:
                    return ArchetypeComponent.Serialize((ArchetypeComponent)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case InternalPersistence:
                    return Persistence.Serialize((Persistence)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case InternalConnectedEntity:
                    return ConnectedEntity.Serialize((ConnectedEntity)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case InternalUniqueID:
                    return UniqueID.Serialize((UniqueID)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case InternalConnection:
                    return Connection.Serialize((Connection)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case InternalConnectionScene:
                    return ConnectionScene.Serialize((ConnectionScene)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case InternalGlobal:
                    return Global.Serialize((Global)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case InternalGlobalQuery:
                    return GlobalQuery.Serialize((GlobalQuery)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case InternalTag:
                    return Tag.Serialize((Tag)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case InternalTagQuery:
                    return TagQuery.Serialize((TagQuery)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case InternalPreserveChildren:
                    return PreserveChildren.Serialize((PreserveChildren)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case InternalScene:
                    return Scene.Serialize((Scene)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case InternalAssetId:
                    return AssetId.Serialize((AssetId)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case InternalGenericScale:
                    return GenericScale.Serialize((GenericScale)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                case Internal_14d4e5096425b424096f9457117bcf3c_7080837773287956486:
                    return _14d4e5096425b424096f9457117bcf3c_7080837773287956486.Serialize((_14d4e5096425b424096f9457117bcf3c_7080837773287956486)data, isRefSimFrameValid, referenceSimulationFrame, protocolStream, logger);
                default:
                    logger.Error(Coherence.Log.Error.DefinitionMissingComponentImplementation, ("component", data.GetComponentType()));
                    return 0;
            }
        }

        private IEntityCommand ReadCommand(uint commandType, Entity entity, MessageTarget target, IInProtocolBitStream bitStream, Logger logger)
        {
            switch (commandType)
            {
                case Definition.InternalAuthorityRequest:
                    return AuthorityRequest.Deserialize(bitStream, entity, target);
                case Definition.InternalAuthorityTransfer:
                    return AuthorityTransfer.Deserialize(bitStream, entity, target);
                case Definition.InternalQuerySynced:
                    return QuerySynced.Deserialize(bitStream, entity, target);
                case Definition.InternalAdoptOrphan:
                    return AdoptOrphan.Deserialize(bitStream, entity, target);
                case Definition.InternalPersistenceReady:
                    return PersistenceReady.Deserialize(bitStream, entity, target);
                case Definition.InternalSceneIndexChanged:
                    return SceneIndexChanged.Deserialize(bitStream, entity, target);
                default:
                    throw new System.ArgumentOutOfRangeException(nameof(commandType),
                        $"Missing serialization implementation for a command: {commandType}");
            }
        }

        private IEntityInput ReadInput(uint inputType, Entity entity, long frame, IInProtocolBitStream bitStream, Logger logger)
        {
            switch (inputType)
            {
                default:
                    throw new System.ArgumentOutOfRangeException(nameof(inputType),
                        $"Missing serialization implementation for an input: {inputType}");
            }
        }

        public IEntityCommand[]	ReadCommands(IInBitStream bitStream, Logger logger)
        {
            var numMessages = bitStream.ReadUint8();

            var commandData = new IEntityCommand[numMessages];

            for (var i = 0; i < numMessages; i++)
            {
                var entityID = DeserializerTools.DeserializeEntity(bitStream);
                var messageTarget = DeserializerTools.DeserializeMessageTarget(bitStream);
                var componentType = DeserializerTools.DeserializeComponentTypeID(bitStream);
                var inBitStream = new Coherence.Serializer.InProtocolBitStream(bitStream);
                commandData[i] = ReadCommand(componentType, entityID, messageTarget, inBitStream, logger);
            }

            return commandData;
        }

        public IEntityInput[] ReadInputs(IInBitStream bitStream, Logger logger)
        {
            var numMessages = bitStream.ReadUint8();

            var inputData = new IEntityInput[numMessages];

            for (var i = 0; i < numMessages; i++)
            {
                var entityID = DeserializerTools.DeserializeEntity(bitStream);
                var routing = DeserializerTools.DeserializeMessageTarget(bitStream);
                var componentType = DeserializerTools.DeserializeComponentTypeID(bitStream);
                var inBitStream = new Coherence.Serializer.InProtocolBitStream(bitStream);
                var frame = (long)bitStream.ReadUint64();
                var input = ReadInput(componentType, entityID, frame, inBitStream, logger);
                input.Routing = routing;
                inputData[i] = input;
            }

            return inputData;
        }

        public IEntityCommand ReadCommand(IInBitStream bitStream, Logger logger)
        {
            var entityID = DeserializerTools.DeserializeEntity(bitStream);
            var messageTarget = DeserializerTools.DeserializeMessageTarget(bitStream);
            var componentType = DeserializerTools.DeserializeComponentTypeID(bitStream);
            var inBitStream = new Coherence.Serializer.InProtocolBitStream(bitStream);

            return ReadCommand(componentType, entityID, messageTarget, inBitStream, logger);
        }

        public void WriteCommand(IEntityCommand data, uint commandType, IOutProtocolBitStream bitStream, Logger logger)
        {
            switch (commandType)
            {
                case Definition.InternalAuthorityRequest:
                    AuthorityRequest.Serialize((AuthorityRequest)data, bitStream);
                    break;
                case Definition.InternalAuthorityTransfer:
                    AuthorityTransfer.Serialize((AuthorityTransfer)data, bitStream);
                    break;
                case Definition.InternalQuerySynced:
                    QuerySynced.Serialize((QuerySynced)data, bitStream);
                    break;
                case Definition.InternalAdoptOrphan:
                    AdoptOrphan.Serialize((AdoptOrphan)data, bitStream);
                    break;
                case Definition.InternalPersistenceReady:
                    PersistenceReady.Serialize((PersistenceReady)data, bitStream);
                    break;
                case Definition.InternalSceneIndexChanged:
                    SceneIndexChanged.Serialize((SceneIndexChanged)data, bitStream);
                    break;
                default:
                    logger.Error(Coherence.Log.Error.DefinitionMissingCommandImplementation, ("command", commandType));
                    break;
            }
        }

        public void WriteInput(IEntityInput data, uint inputType, IOutProtocolBitStream bitStream, Logger logger)
        {
            var inputData = (InputData)data;
            bitStream.WriteLong(inputData.Frame);

            switch (inputType)
            {
                default:
                    logger.Error(Coherence.Log.Error.DefinitionMissingInputImplementation, ("input", inputType));
                    break;
            }
        }

        public IEntityCommand CreateAuthorityRequest(Entity entity, ClientID requester, AuthorityType authType)
        {
            return new AuthorityRequest(entity, (uint)requester, (int)authType);
        }

        public IEntityCommand CreateAdoptOrphanCommand()
        {
            return new AdoptOrphan();
        }

        public bool TryGetAuthorityRequestCommand(IEntityCommand entityCommand,
            out ClientID requester, out AuthorityType authType)
        {
            if (entityCommand is AuthorityRequest request)
            {
                requester = (ClientID)request.requester;
                authType = (AuthorityType)request.authorityType;

                return true;
            }

            requester = default;
            authType = default;

            return false;
        }

        public IEntityCommand CreateAuthorityTransfer(Entity entity, ClientID newAuthority, bool accepted, AuthorityType authType)
        {
            return new AuthorityTransfer(entity, (uint)newAuthority, accepted, (int)authType);
        }

        public bool TryGetAuthorityTransferCommand(IEntityCommand entityCommand, out ClientID newAuthority,
            out bool transferAccepted, out AuthorityType authType)
        {
            if (entityCommand is AuthorityTransfer transfer)
            {
                newAuthority = (ClientID)transfer.newAuthority;
                transferAccepted = transfer.accepted;
                authType = (AuthorityType)transfer.authorityType;

                return true;
            }

            newAuthority = default;
            transferAccepted = default;
            authType = default;

            return false;
        }

        public ICoherenceComponentData GeneratePersistenceData()
        {
            var persistence = new Persistence();

            return persistence;
        }

        public ICoherenceComponentData GenerateCoherenceUUIDData(string uuid, AbsoluteSimulationFrame simFrame)
        {
            var uniqueID = new UniqueID();
            uniqueID.uuid = uuid;
            uniqueID.uuidSimulationFrame = simFrame;
            uniqueID.FieldsMask = 0b1;

            return uniqueID;
        }

        public ICoherenceComponentData CreateGlobalComponent()
        {
            return new Global();
        }

        public ICoherenceComponentData GenerateGlobalQueryComponent()
        {
            return new GlobalQuery();
        }

        public string ExtractCoherenceUUID(ICoherenceComponentData data)
        {
            var uniqueID = (UniqueID)data;
            return uniqueID.uuid;
        }

        public bool IsConnectedEntity(ICoherenceComponentData data)
        {
            return data.GetComponentType() == Definition.InternalConnectedEntity;
        }

        public Entity ExtractConnectedEntityID(ICoherenceComponentData data)
        {
            var connectedEntity = (ConnectedEntity)data;

            return connectedEntity.value;
        }

        public string ExtractCoherenceTag(ICoherenceComponentData data)
        {
            var tag = (Tag)data;
            return tag.tag;
        }

        public bool TryGetSceneIndexChangedCommand(IEntityCommand entityCommand, out int sceneIndex)
        {
            if (entityCommand is SceneIndexChanged changed)
            {
                sceneIndex = (int)changed.sceneIndex;

                return true;
            }

            sceneIndex = default;

            return false;
        }

        public IEntityCommand CreateSceneIndexChangedCommand(Entity entity, int sceneIndex)
        {
            return new SceneIndexChanged(entity, sceneIndex);
        }

        public bool IsSendOrderedComponent(uint componentID)
        {
            switch(componentID)
            {
                case 6:
                    return true;
                default:
                    return false;
            }
        }
}


}
